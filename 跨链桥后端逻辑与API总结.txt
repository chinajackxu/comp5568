# 跨链桥后端逻辑与API总结

## 概述

`frontend\server.js` 是跨链桥应用的后端服务器，主要负责：

1. 提供静态文件服务（React前端）
2. 提供API端点，处理前端请求
3. 启动和管理桥接服务
4. 查询和缓存链上数据
5. 处理跨链转账请求

## 服务器配置

- 使用 Express.js 框架
- 默认端口：3001（可通过环境变量配置）
- 支持 CORS
- 使用 JSON 解析中间件
- 提供静态文件服务（React构建文件）

## 缓存机制

使用内存缓存存储：

```javascript
const cache = {
  config: null,
  lastUpdated: {
    config: 0,
    balances: 0
  },
  sepoliaBalances: {},
  hardhatBalances: {}
};
```

- 配置信息缓存：10分钟过期
- 余额信息缓存：10秒过期

## 桥接服务管理

1. **启动桥接服务**
   - 功能：启动桥接服务作为子进程
   - 实现：使用 Node.js 的 `child_process.spawn`
   - 处理：捕获标准输出和错误输出，记录日志

2. **关闭桥接服务**
   - 功能：在服务器关闭时终止桥接服务
   - 实现：监听 `SIGINT` 信号，调用 `bridgeProcess.kill()`

## 核心功能函数

### 配置管理

1. **getBridgeConfig**
   - 功能：获取桥接配置
   - 参数：无
   - 返回：配置对象
   - 缓存：10分钟
   - 实现：读取 `bridge/config.js` 文件

### 余额查询

1. **getSepoliaBalance**
   - 功能：获取Sepolia网络上的代币余额
   - 参数：`address` - 要查询的地址
   - 返回：格式化的余额字符串
   - 缓存：10秒
   - 实现：使用ethers.js查询代币合约

2. **getHardhatBalance**
   - 功能：获取Hardhat网络上的代币余额
   - 参数：`address` - 要查询的地址
   - 返回：格式化的余额字符串
   - 缓存：10秒
   - 实现：使用ethers.js查询代币合约

## API端点

### 1. 获取余额 - Sepolia

- **端点**：`GET /api/balance/sepolia/:address`
- **功能**：获取指定地址在Sepolia网络上的代币余额
- **参数**：
  - `address` - 要查询的以太坊地址（路径参数）
- **返回**：
  ```json
  {
    "balance": "100.0"
  }
  ```
- **错误处理**：返回500状态码和错误信息

### 2. 获取余额 - Hardhat

- **端点**：`GET /api/balance/hardhat/:address`
- **功能**：获取指定地址在Hardhat网络上的代币余额
- **参数**：
  - `address` - 要查询的以太坊地址（路径参数）
- **返回**：
  ```json
  {
    "balance": "100.0"
  }
  ```
- **错误处理**：返回500状态码和错误信息

### 3. 获取配置

- **端点**：`GET /api/config`
- **功能**：获取桥接配置信息
- **参数**：无
- **返回**：配置对象，包含网络RPC、合约地址等
- **错误处理**：返回500状态码和错误信息

### 4. 发起转账

- **端点**：`POST /api/transfer`
- **功能**：处理Hardhat到Sepolia的跨链转账请求
- **参数**：
  ```json
  {
    "amount": "10",
    "direction": "h2s",
    "from": "0x...",
    "to": "0x...",
    "token": "MCT"
  }
  ```
- **验证**：
  - 检查必填字段
  - 验证以太坊地址格式
  - 验证转账方向
- **处理**：
  - 创建随机的目标交易哈希
  - 连接到Hardhat网络
  - 验证合约部署状态
  - 授权桥接合约使用代币
  - 锁定代币，指定目标地址
- **返回**：
  ```json
  {
    "success": true,
    "txHash": "0x...",
    "message": "Successfully locked 10 MCT tokens on Hardhat for 0x.... They will be unlocked on Sepolia soon."
  }
  ```
- **错误处理**：返回适当的状态码和错误信息

### 5. 刷新配置

- **端点**：`POST /api/refresh-config`
- **功能**：强制刷新缓存的配置信息
- **参数**：无
- **处理**：清除配置缓存，重新加载配置
- **返回**：
  ```json
  {
    "success": true,
    "config": {...},
    "message": "Configuration refreshed successfully"
  }
  ```
- **错误处理**：返回500状态码和错误信息

## 错误处理

1. **API错误处理**
   - 使用try-catch捕获异常
   - 返回适当的HTTP状态码
   - 提供详细的错误信息

2. **合约交互错误处理**
   - 验证合约是否部署
   - 检查网络连接状态
   - 处理合约调用异常

3. **桥接服务错误处理**
   - 捕获并记录子进程错误
   - 提供日志输出

## 智能合约交互

使用ethers.js与智能合约交互：

1. **代币合约**
   - 功能：
     - `balanceOf`：查询代币余额
     - `decimals`：获取代币精度
     - `approve`：授权桥接合约使用代币

2. **桥接合约**
   - 功能：
     - `lockTokens`：锁定代币进行跨链转账

## 安全考虑

1. **输入验证**
   - 验证以太坊地址格式
   - 验证必填字段
   - 验证转账方向

2. **错误处理**
   - 不暴露敏感信息
   - 提供适当的错误消息

3. **缓存机制**
   - 防止频繁请求区块链
   - 设置合理的过期时间

4. **异常处理**
   - 捕获并处理所有可能的异常
   - 防止服务器崩溃
